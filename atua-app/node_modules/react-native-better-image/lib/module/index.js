function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useRef, useCallback, useState } from 'react';
import { View, Image, ImageBackground, Animated, StyleSheet } from 'react-native';
import { useDeepCompareEffectNoCheck } from 'use-deep-compare-effect';
const {
  Value,
  createAnimatedComponent,
  timing
} = Animated;
const AnimatedImage = createAnimatedComponent(Image);
const AnimatedImageBackground = createAnimatedComponent(ImageBackground);

const BetterImage = ({
  viewStyle,
  thumbnailFadeDuration = 250,
  imageFadeDuration = 250,
  thumbnailSource,
  source,
  onLoadEnd,
  resizeMethod,
  resizeMode,
  thumbnailBlurRadius = 1,
  style,
  fallbackSource = {
    uri: ''
  },
  onError,
  children,
  ...otherProps
}) => {
  const imageOpacity = useRef(new Value(0)).current;
  const thumbnailOpacity = useRef(new Value(0)).current;
  const thumbnailAnimationProgress = useRef();
  const [hasError, setHasError] = useState(false);
  const [hasLoaded, setHasLoaded] = useState(false);

  const onImageLoad = () => {
    setHasLoaded(true);
    timing(imageOpacity, {
      toValue: 1,
      duration: imageFadeDuration,
      useNativeDriver: true
    }).start(() => {
      var _thumbnailAnimationPr;

      (_thumbnailAnimationPr = thumbnailAnimationProgress.current) === null || _thumbnailAnimationPr === void 0 ? void 0 : _thumbnailAnimationPr.stop();
      timing(thumbnailOpacity, {
        toValue: 0,
        duration: thumbnailFadeDuration,
        useNativeDriver: true
      }).start();
    });
    onLoadEnd && onLoadEnd();
  };

  const onThumbnailLoad = () => {
    if (!hasLoaded) {
      const progress = timing(thumbnailOpacity, {
        toValue: 1,
        duration: thumbnailFadeDuration,
        useNativeDriver: true
      });
      thumbnailAnimationProgress.current = progress;
      thumbnailAnimationProgress.current.start();
    }
  };

  const onImageLoadError = event => {
    setHasError(true);
    onError && onError(event);
  };

  useDeepCompareEffectNoCheck(useCallback(() => {
    imageOpacity.setValue(0);
    thumbnailOpacity.setValue(0);
    setHasError(false);
    setHasLoaded(false); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []), [source, thumbnailSource]);
  const ImageComponent = children ? AnimatedImageBackground : AnimatedImage;
  return /*#__PURE__*/React.createElement(View, {
    style: [styles.imageContainerStyle, viewStyle]
  }, thumbnailSource ? /*#__PURE__*/React.createElement(ImageComponent, {
    children: children,
    onLoadEnd: onThumbnailLoad,
    style: [styles.thumbnailImageStyle, {
      opacity: thumbnailOpacity
    }, style],
    source: thumbnailSource,
    blurRadius: thumbnailBlurRadius,
    resizeMethod: resizeMethod,
    resizeMode: resizeMode
  }) : null, /*#__PURE__*/React.createElement(ImageComponent, _extends({
    children: children,
    resizeMethod: resizeMethod,
    resizeMode: resizeMode,
    onLoadEnd: onImageLoad,
    onError: hasError ? () => null : onImageLoadError,
    source: hasError ? fallbackSource : source,
    style: [styles.imageStyle, {
      opacity: imageOpacity
    }, style]
  }, otherProps)));
};

const styles = StyleSheet.create({
  imageContainerStyle: {
    overflow: 'hidden'
  },
  thumbnailImageStyle: { ...StyleSheet.absoluteFillObject
  },
  imageStyle: { ...StyleSheet.absoluteFillObject
  }
});
export default BetterImage;
//# sourceMappingURL=index.js.map