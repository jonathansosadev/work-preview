"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _useDeepCompareEffect = require("use-deep-compare-effect");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const {
  Value,
  createAnimatedComponent,
  timing
} = _reactNative.Animated;
const AnimatedImage = createAnimatedComponent(_reactNative.Image);
const AnimatedImageBackground = createAnimatedComponent(_reactNative.ImageBackground);

const BetterImage = ({
  viewStyle,
  thumbnailFadeDuration = 250,
  imageFadeDuration = 250,
  thumbnailSource,
  source,
  onLoadEnd,
  resizeMethod,
  resizeMode,
  thumbnailBlurRadius = 1,
  style,
  fallbackSource = {
    uri: ''
  },
  onError,
  children,
  ...otherProps
}) => {
  const imageOpacity = (0, _react.useRef)(new Value(0)).current;
  const thumbnailOpacity = (0, _react.useRef)(new Value(0)).current;
  const thumbnailAnimationProgress = (0, _react.useRef)();
  const [hasError, setHasError] = (0, _react.useState)(false);
  const [hasLoaded, setHasLoaded] = (0, _react.useState)(false);

  const onImageLoad = () => {
    setHasLoaded(true);
    timing(imageOpacity, {
      toValue: 1,
      duration: imageFadeDuration,
      useNativeDriver: true
    }).start(() => {
      var _thumbnailAnimationPr;

      (_thumbnailAnimationPr = thumbnailAnimationProgress.current) === null || _thumbnailAnimationPr === void 0 ? void 0 : _thumbnailAnimationPr.stop();
      timing(thumbnailOpacity, {
        toValue: 0,
        duration: thumbnailFadeDuration,
        useNativeDriver: true
      }).start();
    });
    onLoadEnd && onLoadEnd();
  };

  const onThumbnailLoad = () => {
    if (!hasLoaded) {
      const progress = timing(thumbnailOpacity, {
        toValue: 1,
        duration: thumbnailFadeDuration,
        useNativeDriver: true
      });
      thumbnailAnimationProgress.current = progress;
      thumbnailAnimationProgress.current.start();
    }
  };

  const onImageLoadError = event => {
    setHasError(true);
    onError && onError(event);
  };

  (0, _useDeepCompareEffect.useDeepCompareEffectNoCheck)((0, _react.useCallback)(() => {
    imageOpacity.setValue(0);
    thumbnailOpacity.setValue(0);
    setHasError(false);
    setHasLoaded(false); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []), [source, thumbnailSource]);
  const ImageComponent = children ? AnimatedImageBackground : AnimatedImage;
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.imageContainerStyle, viewStyle]
  }, thumbnailSource ? /*#__PURE__*/_react.default.createElement(ImageComponent, {
    children: children,
    onLoadEnd: onThumbnailLoad,
    style: [styles.thumbnailImageStyle, {
      opacity: thumbnailOpacity
    }, style],
    source: thumbnailSource,
    blurRadius: thumbnailBlurRadius,
    resizeMethod: resizeMethod,
    resizeMode: resizeMode
  }) : null, /*#__PURE__*/_react.default.createElement(ImageComponent, _extends({
    children: children,
    resizeMethod: resizeMethod,
    resizeMode: resizeMode,
    onLoadEnd: onImageLoad,
    onError: hasError ? () => null : onImageLoadError,
    source: hasError ? fallbackSource : source,
    style: [styles.imageStyle, {
      opacity: imageOpacity
    }, style]
  }, otherProps)));
};

const styles = _reactNative.StyleSheet.create({
  imageContainerStyle: {
    overflow: 'hidden'
  },
  thumbnailImageStyle: { ..._reactNative.StyleSheet.absoluteFillObject
  },
  imageStyle: { ..._reactNative.StyleSheet.absoluteFillObject
  }
});

var _default = BetterImage;
exports.default = _default;
//# sourceMappingURL=index.js.map