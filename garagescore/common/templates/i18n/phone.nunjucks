{# please keep the syntax IE compatible #}<script>
  // For the moment the formatters will only remove the leading zeros
  var phoneLib = {};

  phoneLib.phoneNumberSpecs = {
    FR: {
      code: '+33',
      // flagUrl: '/flags/france.svg', // Images are not working in <select>
      numberLength: { mobile: 10, landLine: 10 },
      leadingZero: true,
      validators: {
        mobile: function (input) { return /^0[67]\d{8}$/.test(input.replace(/\s/g, '')) },
        landLine: function (input) { return /^0[1-59]\d{8}$/.test(input.replace(/\s/g, '')) }
      },
      formatter: function (input) {
        // Output example: 6 89 68 96 89
        return input.replace(/[^0-9+]+/g, '').replace(/^0/, ''); 
          // Removes the eventual leading zero, now we got: 689689689
          // .replace(/(\d)(\d{2})(\d{2})(\d{2})(\d{2})/, '$1 $2 $3 $4 $5');
      }
    },
    NC: {
      code: '+687',
      // flagUrl: '/flags/france.svg', // Images are not working in <select>
      numberLength: { mobile: 6, landLine: 6 },
      leadingZero: false,
      validators: {
        // For those, I refered to https://github.com/giggsey/libphonenumber-for-php/blob/master/src/data/PhoneNumberMetadata_NC.php
        // Double check on : https://www.itu.int/dms_pub/itu-t/oth/02/02/T02020000980001PDFF.pdf
        mobile: function (input) { return /^(5[0-4]|[79]\d|8[0-79])\d{4}$/.test(input.replace(/(\s|\.)/g, '')) },
        landLine: function (input) { return /^(2[03 -9]|3[0-5]|4[1-7])\d{4}$/.test(input.replace(/(\s|\.)/g, '')) }
      },
      formatter: function (input) {
        // Output example: 54.95.49
        return input.replace(/[^0-9+]+/g, '');
          // .replace(/(\d{2})(\d{2})(\d{2})/, '$1.$2.$3');
      }
    },
    BE: {
      code: '+32',
      // flagUrl: '/flags/belgium.svg', // Images are not working in <select>
      numberLength: { mobile: 10, landLine: 9 },
      leadingZero: true,
      validators: {
        // Was taken from : https://github.com/giggsey/libphonenumber-for-php/blob/master/src/data/PhoneNumberMetadata_BE.php
        // Then I followed : https://en.wikipedia.org/wiki/Telephone_numbers_in_Belgium
        mobile: function (input) { return /^0?[4-7]\d{7,8}$/.test(input.replace(/(\s|\.)/g, '')) },
        landLine: function (input) { return /^0?([1-356]\d{2}|4[0-5]\d|71\d|[89][1-9]\d|80[1-9])\d{5}$/.test(input.replace(/(\s|\.)/g, '')) }
      },
      formatter: function (input) {
        // 2 551 20 20
        return input.replace(/[^0-9+]+/g, '').replace(/^0/, '');
          // Removes the eventual leading zero, now we got: 25512020
          // .replace(/(\d)(\d{3})(\d{2})(\d{2})/, '$1 $2 $3 $4');
      }
    },
    MC: {
      code: '+377',
      numberLength: { mobile: 10, landLine: 8 },
      leadingZero: true,
      validators: {
        mobile: function (input) { return /^0[67]\d{8}$/.test(input.replace(/\s/g, '')) },
        landLine: function (input) { return /^9\d{7}$/.test(input.replace(/\s/g, '')) }
      },
      formatter: function (input) {
        return input
          .replace(/[^0-9+]+/g, '')
          .replace(/^\+377/, '')
          .replace(/^0/, '') // Removes the eventual leading zero, now we got: 689689689
          .replace(/(\d)(\d{2})(\d{2})(\d{2})(\d{2})/, '$1 $2 $3 $4 $5')
      }
    },
    LU: {
      /**
      * WTF is this spec !!!
      * https://github.com/giggsey/libphonenumber-for-php/blob/master/src/data/PhoneNumberMetadata_LU.php
      * */
      code: '+352',
      // flagUrl: '/flags/luxembourg.svg', // Images are not working in <select>
      numberLength: { mobile: 9, landLine: null }, // Numbers can have a length from 5 to 11
      leadingZero: false,
      validators: {
        // I will follow: https://en.wikipedia.org/wiki/Telephone_numbers_in_Luxembourg
        mobile: function (input) { return /^6[25679]1\d{6}$/.test(input.replace(/\s/g, '')) },
        landLine: function (input) { return /^(4|67|2[0-3589]|[3-57-9]\d|2[467](67|[2-57-9]\d))\d{4}$/.test(input.replace(/\s/g, '')) }
      },
      formatter: function (input) {
        return input.replace(/[^0-9+]+/g, '');
        /*
        const cleanInput = input.replace(/[^0-9+]+/g, '');
        if (cleanInput.length === 5) return cleanInput.replace(/(\d{2})(\d{3})/, '$1 $2');
        if (cleanInput.length === 6) return cleanInput.replace(/(\d{2})(\d{2})(\d{2})/, '$1 $2 $3');
        if (cleanInput.length === 7) return cleanInput.replace(/(\d{2})(\d{2})(\d{3})/, '$1 $2 $3');
        if (cleanInput.length > 7 && cleanInput.length < 12) return cleanInput.replace(/(\d{2})(\d{2})(\d{2})(\d{2,5})/, '$1 $2 $3 $4');
        return cleanInput;
        */
      }
    },
    ES: {
      code: '+34',
      // flagUrl: '/flags/spain.svg', // Images are not working in <select>
      numberLength: { mobile: 9, landLine: 9 },
      leadingZero: false,
      validators: {
        // https://github.com/giggsey/libphonenumber-for-php/blob/master/src/data/PhoneNumberMetadata_ES.php
        // That should be the regex : 9(6906(09|10)|7390\d\d)\d\d|(?:6\d|7[1-48])\d{7}
        mobile: function (input) { return /^[67]\d{8}$/.test(input.replace(/\s/g, '')) },
        // That should be the regex : 96906(0[0-8]|1[1-9]|[2-9]\d)\d\d|9(69(0[0-57-9]|[1-9]\d)|73([0-8]\d|9[1-9]))\d{4}|(8([1356]\d|[28][0-8]|[47][1-9])|9([135]\d|[268][0-8]|4[1-9]|7[124-9]))\d{6}
        landLine: function (input) { return /^[589]\d{8}$/.test(input.replace(/\s/g, '')) }
      },
      formatter: function (input) {
        // +34 689 68 96 89
        return input.replace(/[^0-9+]+/g, '');
          // .replace(/(\d{3})(\d{2})(\d{2})(\d{2})/, '$1 $2 $3 $4');
      }
    },
    US: {
      code: '+1',
      // flagUrl: '/flags/usa.svg', // Images are not working in <select>
      numberLength: { mobile: 10, landLine: 10 },
      leadingZero: false,
      validators: {
        // https://github.com/giggsey/libphonenumber-for-php/blob/master/src/data/PhoneNumberMetadata_US.php
        mobile: function (input) { return /^[2-9]\d{9}$/.test(input.replace(/(\s|-)/g, '')) },
        landLine: function (input) { return /^[2-9]\d{9}$/.test(input.replace(/(\s|-)/g, '')) }
      },
      formatter: function (input) {
        // +1 541-754-3010
        return input.replace(/[^0-9+]+/g, '');
          // .replace(/(\d{3})(\d{3})(\d{4})/, '$1-$2-$3');
      }
    }
  };

  /**
  * This function validates a phone number given in parameter
  * I default the mode to `mobile` as opposed to the common/lib module because we're asking for a mobile phone in the survey
  * @param {String} input Phone number to be validated, format is strict as the country code is mandatory
  * @param {String} mode Choses between mobile, landline or any type of number
  * @param {String} forceCountry Forces the validation to be made against a countrie's spec
  */
  phoneLib.validatePhoneNumberFromInput = function (input, mode, forcedCountry) {
    // Find the spec to use;
    mode = mode || 'mobile';
    var spec = phoneLib.phoneNumberSpecs[forcedCountry];
    if (!spec) return false;

    var cleanedInput = input.replace(/(\s|\.|-)/g, '').replace(spec.code, spec.leadingZero ?  '0' : '');

    if (mode !== 'any' && spec.validators[mode]) return spec.validators[mode](cleanedInput);
    return Object.values(spec.validators).some(function (validator) { return validator(cleanedInput)});
  };

  /**
  * This function will extract the relevant information of a phone number given in argument
  * It will guess the country and then extract the national phone number
  * @param {String} input Phone number to be decoded
  */
  phoneLib.parsePhoneNumber = function (input) {
    var cleanedInput = input.replace(/(\s|\.|-)/g, '');
    var country = Object.keys(phoneLib.phoneNumberSpecs).find(function (countryCode) {
      var spec = phoneLib.phoneNumberSpecs[countryCode];
      if (!spec.numberLength.mobile || !spec.numberLength.landLine) return cleanedInput.indexOf(spec.code) === 0;
      return cleanedInput.indexOf(spec.code) === 0 &&
          (cleanedInput.length === (spec.code.length + spec.numberLength.mobile) - (spec.leadingZero ? 1 : 0) ||
          cleanedInput.length === (spec.code.length + spec.numberLength.landLine) - (spec.leadingZero ? 1 : 0));
    });
    if (!country) return null;
    return { country: country, nationalPhoneNumber: input.replace(phoneLib.phoneNumberSpecs[country].code, '') };
  };

</script>