/* eslint-disable*/
/*!
 * displace.js 1.2.0 - Tiny javascript library to create moveable DOM elements.
 * Copyright (c) 2017 Catalin Covic - https://github.com/catc/displace
 * License: MIT
 */
!(function (e, t) {
  'object' == typeof exports && 'object' == typeof module
    ? (module.exports = t())
    : 'function' == typeof define && define.amd
    ? define([], t)
    : 'object' == typeof exports
    ? (exports.displace = t())
    : (e.displace = t());
})(this, function () {
  return (function (e) {
    function t(n) {
      if (o[n]) return o[n].exports;
      var s = (o[n] = { exports: {}, id: n, loaded: !1 });
      return e[n].call(s.exports, s, s.exports, t), (s.loaded = !0), s.exports;
    }
    var o = {};
    return (t.m = e), (t.c = o), (t.p = ''), t(0);
  })([
    function (e, t, o) {
      'use strict';
      function n(e) {
        return e && e.__esModule ? e : { default: e };
      }
      var s = o(1),
        u = n(s);
      e.exports = u['default'];
    },
    function (e, t, o) {
      'use strict';
      function n(e, t) {
        if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function');
      }
      function s() {
        var e = this.el,
          t = this.opts || r,
          o = {};
        if (((e.style.position = 'absolute'), (this.handle = t.handle || e), t.constrain)) {
          for (var n = t.relativeTo || e.parentNode, s = e, a = 0, c = 0; s !== n; )
            (s = s.parentNode),
              (0, u.isRelative)(s) && ((a -= s.offsetLeft), (c -= s.offsetTop)),
              s === n && ((a += s.offsetLeft), (c += s.offsetTop));
          var l = a + n.offsetWidth - e.offsetWidth,
            h = c + n.offsetHeight - e.offsetHeight;
          (o.xClamp = (0, u.generateClamp)(a, l)), (o.yClamp = (0, u.generateClamp)(c, h));
        }
        (this.opts = t),
          (this.data = o),
          (this.events = {
            mousedown: i.mousedown.bind(this),
            mouseup: i.mouseup.bind(this),
            touchstart: i.touchstart.bind(this),
            touchstop: i.touchstop.bind(this),
          }),
          this.handle.addEventListener('mousedown', this.events.mousedown, !1),
          this.handle.addEventListener('touchstart', this.events.touchstart, !1);
      }
      Object.defineProperty(t, '__esModule', { value: !0 });
      var u = o(2),
        i = o(3),
        r = {
          constrain: !1,
          relativeTo: null,
          handle: null,
          onMouseDown: null,
          onMouseMove: null,
          onMouseUp: null,
          onTouchStart: null,
          onTouchMove: null,
          onTouchStop: null,
        },
        a = (function () {
          function e(t, o) {
            if ((n(this, e), !t)) throw Error('Must include moveable element');
            (this.el = t), (this.opts = o), s.call(this);
          }
          return (
            (e.prototype.reinit = function () {
              s.call(this);
            }),
            (e.prototype.destroy = function () {
              var e = this.events;
              this.handle.removeEventListener('mousedown', e.mousedown, !1),
                document.removeEventListener('mousemove', e.mousemove, !1),
                document.removeEventListener('mouseup', e.mouseup, !1),
                this.handle.removeEventListener('touchstart', e.touchstart, !1),
                document.removeEventListener('touchmove', e.touchmove, !1),
                document.removeEventListener('touchstop', e.touchstop, !1),
                (this.data = null),
                (this.events = null),
                (this.el = null),
                (this.handle = null),
                (this.opts = null);
            }),
            e
          );
        })();
      t['default'] = function (e, t) {
        return new a(e, t);
      };
    },
    function (e, t) {
      'use strict';
      function o(e, t) {
        return function (o) {
          return Math.min(Math.max(o, e), t);
        };
      }
      function n() {
        return window.requestAnimationFrame
          ? function (e, t, o) {
              window.requestAnimationFrame(function () {
                (e.style.left = t + 'px'), (e.style.top = o + 'px');
              });
            }
          : function (e, t, o) {
              (e.style.left = t + 'px'), (e.style.top = o + 'px');
            };
      }
      function s(e) {
        return 'relative' === window.getComputedStyle(e).position;
      }
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t.generateClamp = o),
        (t.generateMoveFn = n),
        (t.isRelative = s);
    },
    function (e, t, o) {
      'use strict';
      function n(e) {
        var t = e.target.tagName.toLowerCase();
        if ('input' !== t && 'textarea' !== t) {
          var o = this.el,
            n = this.events,
            u = this.opts;
          'function' == typeof u.onMouseDown && u.onMouseDown(o, e);
          var i = e.clientX - o.offsetLeft,
            r = e.clientY - o.offsetTop;
          (n.mousemove = s.bind(this, i, r)),
            document.addEventListener('mousemove', n.mousemove, !1),
            document.addEventListener('mouseup', n.mouseup, !1);
        }
      }
      function s(e, t, o) {
        var n = this.el,
          s = this.opts,
          u = this.data;
        'function' == typeof s.onMouseMove && s.onMouseMove(n, o);
        var i = o.clientX - e,
          r = o.clientY - t;
        return s.constrain && ((i = u.xClamp(i)), (r = u.yClamp(r))), l(n, i, r), o.preventDefault(), !1;
      }
      function u(e) {
        var t = this.el,
          o = this.opts,
          n = this.events;
        'function' == typeof o.onMouseUp && o.onMouseUp(t, e),
          document.removeEventListener('mouseup', n.mouseup, !1),
          document.removeEventListener('mousemove', n.mousemove, !1);
      }
      function i(e) {
        var t = e.target.tagName.toLowerCase();
        if ('input' !== t && 'textarea' !== t) {
          var o = this.el,
            n = this.events,
            s = this.opts;
          'function' == typeof s.onTouchStart && s.onTouchStart(o, e);
          var u = e.targetTouches[0],
            i = u.clientX - o.offsetLeft,
            a = u.clientY - o.offsetTop;
          (n.touchmove = r.bind(this, i, a)),
            document.addEventListener('touchmove', n.touchmove, !1),
            document.addEventListener('touchend', n.touchstop, !1),
            document.addEventListener('touchcancel', n.touchstop, !1);
        }
      }
      function r(e, t, o) {
        var n = this.el,
          s = this.opts,
          u = this.data;
        'function' == typeof s.onTouchMove && s.onTouchMove(n, o);
        var i = o.targetTouches[0],
          r = i.clientX - e,
          a = i.clientY - t;
        return s.constrain && ((r = u.xClamp(r)), (a = u.yClamp(a))), l(n, r, a), o.preventDefault(), !1;
      }
      function a(e) {
        var t = this.el,
          o = this.opts,
          n = this.events;
        'function' == typeof o.onTouchStop && o.onTouchStop(t, e),
          document.removeEventListener('touchmove', n.touchmove, !1),
          document.removeEventListener('touchend', n.touchstop, !1),
          document.removeEventListener('touchcancel', n.touchstop, !1);
      }
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t.mousedown = n),
        (t.mousemove = s),
        (t.mouseup = u),
        (t.touchstart = i),
        (t.touchmove = r),
        (t.touchstop = a);
      var c = o(2),
        l = (0, c.generateMoveFn)();
    },
  ]);
});
