{% extends "../common/layouts/darkbo.nunjucks" %}

{% block page %}
<div class="page-header">
  <h1>Test mecaplanning</h1>
</div>
<div class="col-md-12">
  <p>
    Test la récupération des données mecaplanning pour un jour et un garage donné.
    ATTENTION: NOUS PRENNONS 15 jours avant la date mini choisie. Exemple: début: 13/12/2018 deviendra 28/11/2018
  </p>
</div>
{% raw %}
<div id="content" class="col-md-12">
  <div class="row">
    <label class="col-md-12">Garage</label>
    <div class="col-md-12 searchbox">
      <input type="text" v-model="id" size="40" placeholder="garageId"/>
    </div>
    <div class="col-md-12">Exemple: 577a30d774616c1a0056c263</div>
  </div>

  <div class="row" style="margin-top: 30px">
  <form class="col-md-12 form-inline">
    <div class="form-group">
      <label class="">Date de début</label>
      <select  class="form-control" v-model="dd">
        <option v-for="n in 31" :value="n">{{n}}</option>
      </select>
      <select  class="form-control" v-model="mm">
        <option v-for="n in 12" :value="n">{{n}}</option>
      </select>
      <select  class=" form-control" v-model="yyyy">
        <option value="2016">2016</option>
        <option value="2017">2017</option>
        <option value="2018">2018</option>
        <option value="2019">2019</option>
        <option value="2020">2020</option>
        <option value="2021">2021</option>
      </select>
    </div>
    <div class="form-group">
      <label class="">Date de fin</label>
      <select  class="form-control" v-model="dd2">
        <option v-for="n in 31" :value="n">{{n}}</option>
      </select>
      <select  class="form-control" v-model="mm2">
        <option v-for="n in 12" :value="n">{{n}}</option>
      </select>
      <select  class="form-control" v-model="yyyy2">
        <option value="2016">2016</option>
        <option value="2017">2017</option>
        <option value="2018">2018</option>
        <option value="2019">2019</option>
        <option value="2020">2020</option>
        <option value="2021">2021</option>
      </select>
    </div>
  </form>
    </div>
  <div class="row" style="margin-top: 30px">
    <div class="col-md-12">
      <a @click="getCsv" class="btn btn-success">Récupérer le csv</a>
    </div>
  </div>
  <div v-if="loading" class="row"> {{ loading }}</div>
  <div v-if="error" class="row">{{ error }}</div>
  <div v-if="results" class="row"><pre>{{ results }}</pre></div>
</div>
{% endraw %}
{% endblock %}


{% block scripts %}
<script type="text/javascript">
 var garages = {{ garages|safe }};
</script>

{% include "../common/components/_auto-complete/auto-complete.nunjucks" %}
  {% include "../common/components/garages-list/garages-list.component.nunjucks" %}
<script type="text/javascript">
  new Vue({
    el: '#content',
    data: function () {
      return {
        garages: garages,
        id: '',
        dd: '0',
        mm: '0',
        yyyy: new Date().getFullYear(),
        dd2: '1',
        mm2: '0',
        yyyy2: new Date().getFullYear(),
        loading: null,
        error: null,
        results: null
      };
    },
    methods: {
      getCsv: function () {
        if (!this.id || this.id.length !== 24) return;
        if (!this.dd) return;
        if (!this.mm) return;
        if (!this.yyyy) return;
        if (!this.dd2) return;
        if (!this.mm2) return;
        if (!this.yyyy2) return;
        this.loading = 'Chargement....';
        this.error = null;
        this.results = null;
        var request = new XMLHttpRequest();
        var url = '{{ lib.client.url.getShortUrl('ADMIN_GARAGE_TEST_MECAPLANNING_GETCSV') }}'
          + '?id=' + this.id +
          '&start=' + this.yyyy+'-'+(parseInt(this.mm))+'-'+(parseInt(this.dd)) +
          '&end=' + this.yyyy2+'-'+(parseInt(this.mm2))+'-'+(parseInt(this.dd2));
        request.open('POST', url, true);
        request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        request.send();
        request.onload = function () {
          if (request.status !== 200 && request.status !== 304) {
            this.results = { isValid: false };
            this.error = 'Erreur sur le serveur';
          } else {
            var resSocket = JSON.parse(request.responseText);
            var protocol = document.location.protocol.indexOf('https') > -1 ? 'wss' : 'ws';
            var HOST = protocol + '://' + document.location.host + resSocket.websocket;
            var ws = new WebSocket(HOST);

            ws.onmessage = function (event) {
              var res = event.data && JSON.parse(event.data);
              console.log(res)
              if (res && res.status === 'running') {
                this.loading = ['C\'est long...','zzzzzz...', 'Ça  arrive, ça arrive...', 'Un peu de patience...', 'Bientôt des résultats ! ...enfin on espère...'][Math.floor(Math.random() * 5)];
                return;
              }
              if (res && res.status === 'ok') {
                this.loading = null;
                this.results = res.details;
              } else if (res && res.status === 'ko') {
                this.loading = null;
                this.error = res.message;
              } else {
                this.loading = null;
                this.error = 'Erreur serveur';
              }
              ws.close();
            }.bind(this);
          }
        }.bind(this);

      }
    }
  });
</script>
{% endblock %}
