{% extends "../common/layouts/darkbo.nunjucks" %}
{% block css %}
<style type="text/css">

  button,select {
    color:black;
  }
  #app {
    margin-top: 30px;
  }
  .instructions {
    font-style: italic;
  }
  .garagelist {
    margin-top: 20px;
    font-size:16px;
    padding-top: 10px;
    border:1px solid white;
  }
  .garagelist label {
    cursor: pointer;
    display: inline-block;
    font-size: 12px;
    padding: 5px;
    width:250px;
    height: 40px;
    overflow: hidden;
  }
  .garageTitle {
    margin-top: 10px;
    font-weight: bold;
  }
  .file {
    list-style: none;
  }
  .green {
    color: rgb(183, 206, 20);
  }
  .red {
    color: red;
  }
  .badge {
    margin-bottom: 10px;
  }
  .campaign {
    background-color: initial !important;
    margin-bottom: 0;
  }
</style>
{% endblock %}
{% block page %}


<div class="col-md-12" id="app">

<div class="overlay-loading" v-if="loading"><div class="centered-loading"></div></div>

  <div class="row">
    <h3>Gestion des fichiers déposés</h3>
     <div class="col-md-12 instructions">
      <p>Choisissez un ou plusieurs garages pour vérifier si les fichiers sont bien déposés et les campagnes lancées.</p>
     </div>
  </div>
  <div class="row">
    <div class="col-md-6">
      <!-- Garage AutoComplete -->
      <gs-garages-list :updated="garageIdUpdated" :hide-advance="true"></gs-garages-list>
      <button @click="showFiles" class="btn">Vérifier les derniers fichiers déposés</button>
    </div>
    <div class="col-md-6 garagelist">
      <p v-if="!selectedGarages.length" class="text-center">Pas de garage sélectionné</p>
      <p v-for="selectedGarage in selectedGarages">
        <button type="button" class="btn btn-danger btn-xs" v-on:click="deleteSelectedGarage(selectedGarage)">
          <span class="fa fa-remove"></span>
        </button>
        {{'{{ garagesById[selectedGarage].publicDisplayName }}'}} |
        {{'{{ displayStatus[garagesById[selectedGarage].status] }}'}}
      </p>
    </div>
  </div>
  <div class="row" v-for="(push, key) in pushes">
    <div class="garageTitle  col-md-12">{{'{{'}} push.name {{'}}'}} ({{'{{'}} key {{'}}'}})</div>
    <div class="col-md-12">
      <table class="table table-bordered">
      <th v-if="garagesById[push.garageId].status !== garageStatus['RUNNING_MANUAL']">Déposé sur S3</th>
      <th>Nom du fichier {{ garageStatus['RUNNING_MANUAL'] }}</th>
      <th>Importé en BDD</th>
      <th>Campagnes</th>
          <th>Informations datas (Seulement sur les fichiers post 30/04/2020, <span class="red">Cliquez sur infos campagnes pour obtenir les datas</span>)</th>
          <th> DataIds <button @click="showIds = `all`">Tous</button> / <button @click="showIds = `automation`">Import pour clients finaux seulement</button></th>
      <tbody>
      <tr class="file" v-for="file in push.files">
      <td v-if="garagesById[push.garageId].status !== garageStatus['RUNNING_MANUAL']">{{'{{'}} file.pushedAt {{'}}'}}</td>
      <td><a target='_blank' :href="'{{ lib.client.url.getShortUrl('ADMIN_GARAGE_PULL_VIEW_FILE') }}?bucket=' + (garagesById[push.garageId].status === garageStatus['RUNNING_MANUAL'] ? 'humanupload' : 'S3') + '&filePath=' + (file.path)">{{'{{'}} file.path.split('/').pop() {{'}}'}}</a></td>
      <td v-if="file.dataFile.exist">
        <div class="green">Le {{'{{'}} file.dataFile.importedAt {{'}}'}}</div>
      </td>
      <td v-else>
        <div class="red">
        Non Importée
        <select class="" v-model="dataType[file.path]" @change="startImport(push.garageId, file, dataType[file.path])">
          <option value="" disabled >Importer comme</option>
          <option v-for="dataType in dataTypes" >
            {{'{{'}} dataType {{'}}'}}
          </option>
        </select>
        </div>
      </td>
      <td>
        {#<button class="btn btn-warning btn-sm" v-if="file.dataFile.exist && (file.dataFile.status === 'New' || file.dataFile.status === 'Waiting')" @click="deleteAllConnectedData(file.dataFile.id)">CANCEL</button>#}
        {#<button class="btn btn-danger btn-sm" v-else-if="file.dataFile.exist" @click="hideFromStats(file.dataFile.id)">DELETE</button>#}
        <button class="btn btn-sm btn-info" v-if="file.dataFile.exist && !campaigns[file.dataFile.id] && file.dataFile.importStatus !== 'Error'" @click="getCampaigns(file.dataFile.id)">Info campagne(s)</button>
        <button class="btn btn-sm btn-danger" v-if="file.dataFile.exist && file.dataFile.importStatus === 'Error'" @click="deleteDatafileInError(file.dataFile.id)">Annuler l'import du DataFile en erreur</button>
        <div v-if="campaigns[file.dataFile.id]">
          <table v-if="campaigns[file.dataFile.id] && campaigns[file.dataFile.id].length" class="table table-inverse campaign">
            <thead>
              <tr>
                <th>Id</th>
                <th>Type</th>
                <th>Status</th>
                <th>Public</th>
                <th>Options</th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="campaign in campaigns[file.dataFile.id]">
                <td>{{'{{campaign.id}}'}}</td>
                <td>{{'{{campaign.type || "Non défini"}}'}}</td>
                <td>{{'{{campaign.status}}'}}</td>
                <td>{{'{{campaign.shouldSurfaceInStatistics}}'}}</td>
                <td>
                  <button class="btn btn-xs btn-danger" v-if="campaign.status === 'Waiting' || campaign.status === 'New' " @click="deleteCampaign(campaign.id, file.dataFile.id)">SUPPRIMER</button>
                  <button class="btn btn-xs btn-warning" v-else-if="campaign.shouldSurfaceInStatistics === true" @click="hideCampaign(campaign.id, file.dataFile.id)">ANNULER</button>
                </td>
              </tr>
            </tbody>
          </table>
          <span v-else>
            <i v-if="file.dataFile && file.dataFile.importAutomation">Import pour Automation</i>
            <i v-else-if="file.dataFile && file.dataFile.hasAutomationData">Ce dataFile contient des données crées pour Automation.</i>
            <i v-else-if="file.dataFile.noContactableData">Aucune campagne (aucun data contactable, datas conservés en bdd quand même) <button class="btn btn-xs btn-danger" @click="deleteDataFile(file.dataFile.id)">Supprimer le dataFile</button></i>
            <i v-else>Aucune campagne (données du fichier vides ou ignorées) <button class="btn btn-xs btn-danger" @click="deleteDataFile(file.dataFile.id)">Supprimer le dataFile</button></i>
          </span>
        </div>
      </td>
      <td>
          Nb datas liées : {{ '{{ file.dataFile && file.dataFile.nbDatasCreated || 0}}' }} (dont {{ '{{ file.dataFile && file.dataFile.nbDatasAutomation || 0}}' }} crées sans campagne pour alimenter la BDD client finaux)
      </td>
      <td>
          <div v-if="file.dataFile">
              <div v-if="showIds === `all`">
                  {{ '{{ file.dataFile && file.dataFile.datasCreatedIds && file.dataFile.datasCreatedIds.join(", ") }}' }}
              </div>
              <div v-if="showIds === `automation`">
                  {{ '{{ file.dataFile && file.dataFile.datasCreatedIds && file.dataFile.datasAutomationIds.join(", ") }}' }}
              </div>
          </div>
      </td>
      </tr>
      <tr v-if="false">
        <td colspan="6">
        <label>Pull manuel - Dépose sur S3 un fichier récupéré depuis le dms et l'importe (non fonctionnel sur tous les garages) </label>
        <select  class="lastdays" v-model="pullDate[key]">
          <option value="" disabled >(année-mois-jour)</option>
          <option v-for="date in lastdays" :value="date">
            {{'{{'}} date {{'}}'}}
          </option>
        </select>
        <select  class="lastdays" v-model="pullDataType[key]">
          <option value="" disabled >Choisir un type de données</option>
          <option v-for="type in dataTypes">
            {{'{{'}} type {{'}}'}}
          </option>
        </select>
         <button class="badge" v-if="pullDate[key] && pullDate[key] !== '' && pullDataType[key] && pullDataType[key] !== ''"  @click="manualPull(key)">Importer</button>
        </td>
      </tr>
      </tbody>
      </table>
    </div>
  </div><!-- push list row -->
</div><!-- app -->
{% endblock %}

{% block scripts %}
  {% include "../common/components/_auto-complete/auto-complete.nunjucks" %}
  {% include "../common/components/garages-list/garages-list.component.nunjucks" %}

<script type="text/javascript">

  var displayStatus = {{ statusToNames|safe }};
  var garageStatus = {{ garageStatus|safe }};
  var garages = {{ garages|safe }};
  var lastdays = {{ lastdays|safe }};
  var dataTypes = {{ dataTypes|safe }};
  var garagesById = {};
  var listUrls = {
    'ADMIN_GARAGE_PULL_LIST_CAMPAIGNS'          : "{{ lib.client.url.getShortUrl('ADMIN_GARAGE_PULL_LIST_CAMPAIGNS') }}",
    'ADMIN_GARAGE_PULL_LIST_PUSHES'             : "{{ lib.client.url.getShortUrl('ADMIN_GARAGE_PULL_LIST_PUSHES') }}",
    'ADMIN_GARAGE_PULL_CAMPAIGNS_FROM_DATAFILE' : "{{ lib.client.url.getShortUrl('ADMIN_GARAGE_PULL_CAMPAIGNS_FROM_DATAFILE') }}",
    'ADMIN_GARAGE_PULL_HIDE_CAMPAIGN'           : "{{ lib.client.url.getShortUrl('ADMIN_GARAGE_PULL_HIDE_CAMPAIGN') }}",
    'ADMIN_GARAGE_PULL_CANCEL_CAMPAIGN'         : "{{ lib.client.url.getShortUrl('ADMIN_GARAGE_PULL_CANCEL_CAMPAIGN') }}",
    'ADMIN_GARAGE_PULL_DELETE_CAMPAIGN'         : "{{ lib.client.url.getShortUrl('ADMIN_GARAGE_PULL_DELETE_CAMPAIGN') }}",
    'ADMIN_GARAGE_PULL_DATA_FILE_DELETE'        : "{{ lib.client.url.getShortUrl('ADMIN_GARAGE_PULL_DATA_FILE_DELETE') }}"
  };
  /** ADD DMS INFO */
  for (var g = 0; g < garages.length; g++) {
    var garage = garages[g];
    if(garage.dms) {
      try {
        var keys = Object.keys(garage.dms);
        if (keys && keys.length > 0) {
          garage.pulldms = keys[0];
        }
      }catch(e){
        console.error(e)
      }

    }
  }
  for (let g = 0; g < garages.length; g++) {
    garagesById[garages[g].id] = garages[g];
  }

  var _lastPulls = {};
  new Vue({
    el: '#app',
    data: function () {
      return {
        garages: garages,
        garagesById: garagesById,
        displayStatus: displayStatus,
        garageStatus: garageStatus,
        selectedGarages: [],
        pushes: {},
        lastCheckedGarages: [],
        lastdays: lastdays,
        dataTypes: dataTypes,
        dataType: {},
        pullDate: {},
        pullDataType: {},
        campaigns: {},
        loading: false,
        showIds: ''
      };
    },
    mounted: function () {
      this.$watch('pushes', this.genModels, {deep: true});
    },
    methods: {
      /** Generic POST method **/
       request: function (urlLabel, data, cb) {
        this.loading = true;
        var request = new XMLHttpRequest();
        var posturl = listUrls[urlLabel] + '?t=' + new Date().getTime();
        request.open('POST', posturl, true);
        request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        request.onload = function() {
          this.loading = false;
          cb(request.status, JSON.parse(request.responseText));
        }.bind(this);
        request.send(JSON.stringify(data));
      },
      /** Select all garages **/
      genModels: function () {
        var keys = Object.keys(this.pushes);
        for (var i = 0; i < keys.length; ++i) {
          if (this.pushes[keys[i]].files) {
            for (var j = 0; j < this.pushes[keys[i]].files.length; ++j) {
              const dataFile = this.pushes[keys[i]].dataFiles && this.pushes[keys[i]].dataFiles.find((element) => element.filePath === this.pushes[keys[i]].files[j].path);
              if (dataFile) {
                this.pushes[keys[i]].files[j].dataFileRaw = dataFile;
              }
              if (this.pushes[keys[i]].files[j].path) {
                this.dataType[this.pushes[keys[i]].files[j].path] = '';
              }
            }
          }
        }
      },
      /** Show last pulls **/
      showFiles : function () {
        if(this.loading)  return;
        this.loading = true;
        var request = new XMLHttpRequest();
        var posturl = '{{ lib.client.url.getShortUrl('ADMIN_GARAGE_PULL_LIST_PUSHES') }}?t=' + new Date().getTime();
        request.open('POST', posturl, true);
        request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        request.onload = function() {
          this.loading = false;
          if (request.status !== 200 && request.status !== 304){
            alert("Erreur ! Plus de détails dans la console");
            console.error("List error : ");
            console.error(request.responseText);
          } else {
            var res = JSON.parse(request.responseText);
            this.pushes = res.pushes;
          }
        }.bind(this);
        this.lastCheckedGarages = this.selectedGarages;
        request.send(JSON.stringify({garageIds: this.selectedGarages }));
      },
      /** Download file to s3 **/
      manualPull: function(garageId) {
        if(this.loading)  return;
        var date = this.pullDate[garageId];
        var dataType = this.pullDataType[garageId];
        this.loading = true;
        var request = new XMLHttpRequest();
        var posturl = '{{ lib.client.url.getShortUrl('ADMIN_GARAGE_PULL_DOWNLOAD') }}?t=' + new Date().getTime();
        request.open('POST', posturl, true);
        request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        request.onload = function() {
          this.loading = false;
          if (request.status !== 200 && request.status !== 304){
            alert("Erreur ! Plus de détails dans la console");
            console.error("List error : ");
            console.error(request.responseText);
          } else {
            var res = JSON.parse(request.responseText);
            console.log(request);
            if(res.status === 'ok') {
              this.pushes = res.pushes;
            } else {
              alert("Erreur ! Plus de détails dans la console");
              console.error("List error : ");
              console.error(res.error);
            }

          }
        }.bind(this);
        request.send(JSON.stringify({garageIds: this.lastCheckedGarages, garageId: garageId, date: date, dataType: dataType }));
      },
      /** Import file from s3 **/
      startImport: function(garageId, file, dataType) {
        if(this.loading)  return;
        this.loading = true;
        var request = new XMLHttpRequest();
        var posturl = '{{ lib.client.url.getShortUrl('ADMIN_GARAGE_PULL_IMPORT') }}?t=' + new Date().getTime();
        request.open('POST', posturl, true);
        request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        request.onload = function() {
          this.loading = false;
          var res = JSON.parse(request.responseText);
          if (res.status === 'ok') {
            this.pushes = res.pushes;
            this.showFiles();
            console.log(res);
          } else {
            console.log(res.error);
            alert("Erreur ! Plus de détails dans la console");
          }
        }.bind(this);
        request.send(JSON.stringify({garageIds: this.lastCheckedGarages, filePath: file.path, garageId: garageId, dataType: dataType }));
      },
      /** Get all campaign from dataFile id **/
      getCampaigns: function(dataFileId) {
        this.request('ADMIN_GARAGE_PULL_CAMPAIGNS_FROM_DATAFILE', {dataFileId}, function (status, data) {
          if(data) { this.$set(this.campaigns, dataFileId, data.campaigns); }
          console.log(this.campaigns);
        }.bind(this));
      },
      /** Cancel(hide) a campaign (set [all the data].shouldSurfaceInStatistics = false AND campaign.status = CANCELLED AND campaign.shouldSurfaceInStatistics = false **/
      hideCampaign: function (campaignId, dataFileId) {
        this.request('ADMIN_GARAGE_PULL_CANCEL_CAMPAIGN', {campaignId, garageIds: this.selectedGarages, from: 'campaigns'}, function (status, data) {
          if(data) {
            this.getCampaigns(dataFileId);
            console.log(data);
          }
        }.bind(this));
      },
      /** Delete a Campaign and all the linked datas **/
      deleteCampaign: function (campaignId, dataFileId) {
        this.request('ADMIN_GARAGE_PULL_DELETE_CAMPAIGN', {campaignId}, function (status, data) {
          if(data) {
            this.getCampaigns(dataFileId);
            console.log(data);
          }
        }.bind(this));
      },
      /** Force delete a dataFile whatever his status is **/
      deleteDataFile: function (dataFileId) {
        this.request('ADMIN_GARAGE_PULL_DATA_FILE_DELETE', { dataFileId, garageIds: this.selectedGarages, force: true },
          function (status, data) {
            if(data && data.pushes) {
              this.pushes = data.pushes;
          }
        }.bind(this));
      },
      //OLD load datafile stats
      {#datafilestats: function(dataFileId) {#}
        {#if(this.loading)  return;#}
        {#this.loading = true;#}
        {#var request = new XMLHttpRequest();#}
        {#var posturl = '{{ lib.client.url.getShortUrl('ADMIN_GARAGE_PULL_CAMPAIGNS_FROM_DATAFILE') }}?t=' + new Date().getTime();#}
        {#request.open('POST', posturl, true);#}
        {#request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');#}
        {#request.onload = function() {#}
          {#this.loading = false;#}
          {#if (request.status != 200 && request.status != 304){#}
            {#alert("Erreur ! Plus de détails dans la console");#}
            {#console.error("List error : ");#}
            {#console.error(request.responseText);#}
          {#} else {#}
            {#var res = JSON.parse(request.responseText);#}
            {#console.log(request);#}
            {#if(res.status === 'ok') {#}
             {#this.$set(this.stats, dataFileId, res.stats);#}
            {#} else {#}
              {#alert("Erreur ! Plus de détails dans la console");#}
              {#console.error("List error : ");#}
              {#console.error(res.error);#}
            {#}#}

          {#}#}
        {#}.bind(this);#}
        {#request.send(JSON.stringify({dataFileId: dataFileId }));#}
      {#},#}
      /** Delete a datafile in error **/
      deleteDatafileInError: function(dataFileId) {
        if(this.loading)  return;
        this.loading = true;
        var request = new XMLHttpRequest();
        var posturl = '{{ lib.client.url.getShortUrl('ADMIN_GARAGE_PULL_DATA_FILE_DELETE') }}?t=' + new Date().getTime();
        request.open('POST', posturl, true);
        request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        request.onload = function() {
          this.loading = false;
          if (request.status !== 200 && request.status !== 304){
            alert("Erreur ! Plus de détails dans la console");
            console.error("List error : ");
            console.error(request.responseText);
          } else {
            var res = JSON.parse(request.responseText);
            console.log(request);
            if(res.status === 'ok') {
               this.pushes = res.pushes;
            } else {
              alert("Erreur ! Plus de détails dans la console");
              console.error("List error : ");
              console.error(res.error);
            }

          }
        }.bind(this);
        request.send(JSON.stringify({dataFileId: dataFileId, garageIds: this.selectedGarages }));
      },
      /** Garage ID update **/
      garageIdUpdated: function (garage, cancelAutocomplete) {
        this.garageId = garage.id;
        if (this.selectedGarages.indexOf(garage.id) === -1) { // Test if it's not already in the array
          this.selectedGarages.push(garage.id);
        }
        if (cancelAutocomplete) {
          cancelAutocomplete();
        }
      },
      /** Delete garage from selected garage **/
      deleteSelectedGarage: function (garageId) {
        let index = this.selectedGarages.indexOf(garageId);
        if(index > -1) {
          this.selectedGarages.splice(index, 1);
        }
      },
    }
  });
</script>
{% endblock %}
